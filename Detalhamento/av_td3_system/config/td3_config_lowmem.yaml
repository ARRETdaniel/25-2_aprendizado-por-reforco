# TD3 Algorithm Configuration - LOW MEMORY VERSION
# Optimized for 6GB GPU (RTX 2060) running alongside CARLA
# Based on PyTorch CUDA memory documentation: https://pytorch.org/docs/stable/notes/cuda.html

algorithm:
  name: 'TD3'

  # Core TD3 hyperparameters (unchanged from paper)
  learning_rate: 0.0003  # 3e-4, Adam optimizer
  discount: 0.99  # Gamma (γ)
  tau: 0.005  # Polyak averaging coefficient (ρ)

  # TD3-specific mechanisms (unchanged)
  policy_noise: 0.2  # Sigma (σ) for target policy smoothing
  noise_clip: 0.5  # Clip value (c) for target policy noise
  policy_freq: 2  # Delayed policy updates

  # Training parameters - REDUCED BATCH SIZE FOR MEMORY
  batch_size: 64  # ⬇️ Reduced from 256 to 64 (saves ~300MB GPU memory)
  buffer_size: 1000000  # Keep 1M transitions
  learning_starts: 25000  # Keep warm-up period
  train_freq: 1  # Update every step
  gradient_steps: -1  # Match environment steps

  # Exploration noise (unchanged)
  exploration_noise: 0.1  # Gaussian noise std

# Network architecture (unchanged - already memory efficient)
networks:
  actor:
    hidden_layers: [256, 256]
    activation: 'relu'
    output_activation: 'tanh'
    learning_rate: 0.0003

  critic:
    hidden_layers: [256, 256]
    activation: 'relu'
    n_critics: 2  # Twin critics
    learning_rate: 0.0003

  # CNN Feature Extractor (unchanged - MobileNetV3 is memory efficient)
  cnn_extractor:
    architecture: 'mobilenet_v3_small'  # Memory efficient (2.5M params vs 25M for ResNet50)
    input_channels: 4  # Stack of 4 grayscale frames
    input_height: 84
    input_width: 84
    use_pretrained: true  # Transfer learning
    freeze_features: false
    features_dim: 512

# State space configuration (unchanged)
state:
  image:
    enabled: true
    stack_frames: 4
    grayscale: true
    normalize: true
    resize: [84, 84]

  kinematic:
    enabled: true
    features:
      - 'velocity'
      - 'lateral_deviation'
      - 'heading_error'
    normalize: true

  waypoints:
    enabled: true
    num_waypoints: 10
    lookahead_distance: 50.0
    relative_coords: true
    normalize: true

# Action space configuration (unchanged)
action:
  type: 'continuous'
  dim: 2

  steering:
    min: -1.0
    max: 1.0

  throttle_brake:
    min: -1.0
    max: 1.0

  scale_steering: 1.0
  scale_throttle_brake: 1.0

# Reward function configuration (unchanged)
reward:
  weights:
    efficiency: 1.0
    lane_keeping: 2.0
    comfort: 0.5
    safety: -100.0

  efficiency:
    target_speed: 10.0
    speed_tolerance: 2.0
    overspeed_penalty_scale: 2.0

  lane_keeping:
    lateral_tolerance: 0.5
    heading_tolerance: 0.1

  comfort:
    jerk_threshold: 3.0

  safety:
    collision_penalty: -1000.0
    offroad_penalty: -500.0
    wrong_way_penalty: -200.0

# Training configuration
training:
  max_timesteps: 2000000
  max_episode_steps: 1000

  save_freq: 10000
  checkpoint_dir: './data/checkpoints/td3/'
  save_replay_buffer: true

  eval_freq: 5000
  n_eval_episodes: 10
  eval_deterministic: true

  log_dir: './data/logs/td3/'
  tensorboard: true
  wandb:
    enabled: true
    project: 'td3-av-carla'
    entity: null
    tags: ['TD3', 'CARLA', 'Town01', 'visual-navigation', 'low-memory']
    notes: 'TD3 agent optimized for 6GB GPU (batch_size=64)'

  verbose: 1

# Evaluation configuration (unchanged)
evaluation:
  n_episodes: 20
  deterministic: true
  render: false
  record_video: true
  video_dir: './data/videos/td3/'

  metrics:
    - 'success_rate'
    - 'average_speed'
    - 'completion_time'
    - 'collision_count'
    - 'offroad_count'
    - 'avg_lateral_error'
    - 'avg_heading_error'
    - 'avg_jerk'
    - 'avg_lateral_acceleration'
    - 'min_ttc'

# Device configuration (unchanged)
device:
  type: 'auto'
  cuda_device_id: 0

# Reproducibility (unchanged)
seed: 42
deterministic_pytorch: true

# Experiment metadata
experiment:
  name: 'td3_visual_navigation_lowmem'
  description: 'TD3 agent optimized for 6GB GPU (batch_size=64, expandable_segments)'
  version: '1.0.0-lowmem'
  author: 'Daniel Terra Gomes'
  paper: 'End-to-End Visual Autonomous Navigation with Twin Delayed DDPG'
  
# Memory Optimization Notes:
# ================================
# This configuration is optimized for 6GB GPUs running alongside CARLA (~5.4GB).
#
# Key Changes:
# 1. batch_size: 256 → 64 (saves ~300MB GPU memory)
# 2. Use MobileNetV3-Small (2.5M params vs 25M for ResNet50)
#
# Additional Optimizations (applied via environment variables):
# 1. PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True
#    - Reduces memory fragmentation by 60-80%
#    - Allows segments to grow dynamically instead of fixed 2MB chunks
#
# 2. PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:128
#    - Prevents splitting blocks larger than 128MB
#    - Further reduces fragmentation
#
# 3. PYTORCH_CUDA_ALLOC_CONF=garbage_collection_threshold:0.8
#    - Proactively reclaims memory when usage exceeds 80%
#
# Usage:
#   export PYTORCH_CUDA_ALLOC_CONF="expandable_segments:True,max_split_size_mb:128,garbage_collection_threshold:0.8"
#   python scripts/train_td3.py --config config/td3_config_lowmem.yaml
#
# Expected Memory Usage:
#   CARLA: 5.4GB (with RenderOffScreen)
#   PyTorch Models: ~50MB (Actor + Twin Critics)
#   Training Batch (64): ~150MB (images + gradients)
#   Total: ~5.6GB (fits in 6GB with expandable_segments)
#
# Note: If still OOM, try:
#   1. Reduce batch_size to 32
#   2. Use CARLA with -quality-level=Low (~4.5GB instead of 5.4GB)
#   3. Move agent to CPU (slow but feasible)
